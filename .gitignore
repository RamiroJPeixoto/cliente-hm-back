# Diretório de build do Maven e artefatos
# O diretório 'target/' é onde o Maven coloca todos os arquivos gerados pelo build,
# como classes compiladas, arquivos JAR/WAR, resultados de testes, etc.
target/
# Ignora o JAR do wrapper Maven, que pode ser grande e geralmente já está no projeto.
.mvn/wrapper/maven-wrapper.jar

# Caso, por algum erro de configuração ou bug, uma pasta literal com a variável seja criada
# Isso é incomum, mas se aconteceu, essa linha garante que não seja versionado.
${project.build.directory}/

# Arquivos de log
# Ignora todos os arquivos com extensão .log
*.log
# Ignora qualquer diretório chamado 'logs' e seu conteúdo
logs/

# Arquivos de configuração e pastas de IDEs
# IntelliJ IDEA
.idea/
*.iml
*.ipr
*.iws

# Eclipse
.project
.classpath
.settings/
.apt_generated/
.factorypath
.metadata/

# VS Code
.vscode/

# Arquivos específicos do sistema operacional
# macOS
.DS_Store

# Windows
Thumbs.db
ehthumbs.db
Desktop.ini

# Ignorar dependências do Gradle (se por acaso o projeto fosse misto ou migrado)
# Para projetos Maven puros, estas linhas não são estritamente necessárias,
# mas não causam mal.
.gradle/
build/ # O diretório de build padrão do Gradle

# Outros arquivos temporários ou gerados
# Ignora arquivos JAR, WAR e EAR gerados
*.jar
*.war
*.ear

# Arquivos compactados (que geralmente são artefatos ou dependências)
*.zip
*.tar.gz
*.rar

# Arquivos de classe compilados (geralmente já cobertos por 'target/')
# Útil caso algum .class seja gerado fora do diretório padrão.
*.class

# Logs de erro da JVM
hs_err_pid*.log

# Arquivos de cache e temporários de ambiente
# Ignora a pasta de cache do Maven
.m2/repository/
# Ignora pastas temporárias ou de cache genéricas
tmp/
temp/
cache/

# Configurações sensíveis e específicas do ambiente local
# CUIDADO: Use estas linhas com precaução!
# Se você tiver arquivos de configuração com senhas, chaves de API, etc.,
# que são específicos do seu ambiente local e NÃO DEVEM ser versionados.
#
# Exemplos (descomente APENAS se você realmente quer ignorá-los e sabe o porquê):
# src/main/resources/application-dev.properties
# src/main/resources/application-prod.properties
# application.properties # CUIDADO: Se seu application.properties contém valores default que DEVEM ser versionados, não ignore este.
#                          # Para segredos, é mais comum usar variáveis de ambiente, Spring Cloud Config Server,
#                          # ou Vault, e não versionar o arquivo.
# .env # Para arquivos de variáveis de ambiente